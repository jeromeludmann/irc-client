// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`Navigation container should render correctly 1`] = `
ShallowWrapper {
  "length": 1,
  Symbol(enzyme.__root__): [Circular],
  Symbol(enzyme.__unrendered__): <Connect(Navigation) />,
  Symbol(enzyme.__renderer__): Object {
    "batchedUpdates": [Function],
    "getNode": [Function],
    "render": [Function],
    "simulateEvent": [Function],
    "unmount": [Function],
  },
  Symbol(enzyme.__node__): Object {
    "instance": null,
    "key": undefined,
    "nodeType": "class",
    "props": Object {
      "onChannelButtonClick": [Function],
      "servers": Object {
        "server1": Object {
          "availableModes": Object {
            "channel": Array [],
            "user": Array [],
          },
          "channels": Object {
            "@raw": Object {
              "activity": false,
              "input": Object {
                "dirtyValue": "",
                "history": Object {
                  "index": 2,
                  "values": Array [
                    "/connect -n localhost",
                    "/connect localhost",
                  ],
                },
                "value": "",
              },
              "messages": Array [],
            },
            "@status": Object {
              "activity": false,
              "input": Object {
                "dirtyValue": "",
                "history": Object {
                  "index": 2,
                  "values": Array [
                    "/connect -n localhost",
                    "/connect localhost",
                  ],
                },
                "value": "",
              },
              "messages": Array [],
            },
          },
          "lag": 0,
          "modes": Array [],
          "name": "<unknown>",
          "user": Object {
            "nick": "default_nick",
            "real": "default_name",
            "user": "default_user",
          },
        },
      },
      "window": Object {
        "channelKey": "@status",
        "serverKey": "server1",
      },
    },
    "ref": null,
    "rendered": null,
    "type": [Function],
  },
  Symbol(enzyme.__nodes__): Array [
    Object {
      "instance": null,
      "key": undefined,
      "nodeType": "class",
      "props": Object {
        "onChannelButtonClick": [Function],
        "servers": Object {
          "server1": Object {
            "availableModes": Object {
              "channel": Array [],
              "user": Array [],
            },
            "channels": Object {
              "@raw": Object {
                "activity": false,
                "input": Object {
                  "dirtyValue": "",
                  "history": Object {
                    "index": 2,
                    "values": Array [
                      "/connect -n localhost",
                      "/connect localhost",
                    ],
                  },
                  "value": "",
                },
                "messages": Array [],
              },
              "@status": Object {
                "activity": false,
                "input": Object {
                  "dirtyValue": "",
                  "history": Object {
                    "index": 2,
                    "values": Array [
                      "/connect -n localhost",
                      "/connect localhost",
                    ],
                  },
                  "value": "",
                },
                "messages": Array [],
              },
            },
            "lag": 0,
            "modes": Array [],
            "name": "<unknown>",
            "user": Object {
              "nick": "default_nick",
              "real": "default_name",
              "user": "default_user",
            },
          },
        },
        "window": Object {
          "channelKey": "@status",
          "serverKey": "server1",
        },
      },
      "ref": null,
      "rendered": null,
      "type": [Function],
    },
  ],
  Symbol(enzyme.__options__): Object {
    "adapter": ReactSixteenAdapter {
      "options": Object {
        "enableComponentDidUpdateOnSetState": true,
      },
    },
    "context": Object {
      "store": Object {
        "dispatch": [Function],
        "getState": [Function],
        "replaceReducer": [Function],
        "subscribe": [Function],
        Symbol(observable): [Function],
      },
    },
  },
}
`;
